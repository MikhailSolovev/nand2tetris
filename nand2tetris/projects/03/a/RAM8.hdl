// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM8.hdl

/**
 * Memory of 8 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

// up to this point, I chose to implement the RAM chips by splitting it into two, RAM(n/2) where n = number of registers
// I found this exercise helpful in getting a feel for how RAM works. In subsequent, RAM chips, I've taken a different approach,
// implementing the functionality w/o splitting RAM functionality in half each time.

CHIP RAM8 {
    IN in[16], load, address[3];
    OUT out[16];

    PARTS:
    DMux(in=load, sel=address[2], a=a, b=b);
    RAM4(in=in, load=a, address=address[0..1], out=r0);
    RAM4(in=in, load=b, address=address[0..1], out=r1);

    Mux16(a=r0, b=r1, sel=address[2], out=out);
}
